{"1741627984251":{"actionType":"saveAll","createdAt":"1741627984251","actionID":"1741627984251","userID":"#TEMP","path":"system.capsules.ccfc9645-d692-4dc2-acc3-5d84494bb407.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { Image } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, pathSel, getVarValue } from '../project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: {\n    elementsProperties: any;\n    styles: any;\n    URIvariablePath: string[];\n    args: any;\n  };\n};\n\nfunction checkUrl(string: string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nconst defaultUri =\n  'https://www.budgetbatteries.com.au/wp-content/uploads/2021/12/Budget-batteries-placeholder.jpg';\n\n// Element Image\nexport const ImageBox = (props: Tprops) => {\n  // ------- set Props\n  const { elementsProperties, styles, URIvariablePath, args } = props.pass;\n  console.log({ URIvariablePath });\n\n  // ---------- set Url Value as a single string\n  let pathOrUri = URIvariablePath.join();\n\n  const { condChildren, newArgChildren } = testArgs([pathOrUri], args);\n\n  if (condChildren === 'arg') pathOrUri = newArgChildren;\n  if (condChildren === 'var') {\n    const joinedChld = pathOrUri.replace('$var_', '');\n    console.log({ joinedChld });\n    pathOrUri = useData(ct => pathSel(ct, joinedChld));\n  }\n\n  // Se for uma URL válida, usa diretamente, senão busca no useData\n  const watchData = useData(ct => {\n    if (checkUrl(pathOrUri)) return pathOrUri; // Se for uma URL, usa diretamente\n    return pathSel(ct, pathOrUri); // Caso contrário, busca do caminho de dados\n  });\n\n  // ---------- set Styles\n  const stl = getStlValues(styles);\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n  for (let strObj of elementsProperties) {\n    if (!strObj || typeof strObj !== 'string') continue;\n\n    console.log('TEXT', { strObj });\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n      const [hasVar, varValue] = getVarValue(valueProp, 'Component');\n      userElProps[keyProp] = hasVar ? varValue : valueProp;\n    }\n  }\n\n  console.log({ watchData });\n  const isUrl = checkUrl(newArgChildren);\n  console.log({ isUrl });\n\n  const condFinalURI = isUrl ? newArgChildren : watchData || defaultUri;\n\n  console.log({ condFinalURI });\n\n  const allProps = {\n    source: { uri: condFinalURI },\n    style: [stl],\n    resizeMode: 'cover',\n    ...userElProps,\n  };\n\n  return <Image {...allProps} />;\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n  return null;\n};\n\nconst testArgs = (children, args) => {\n  let condChildren = '';\n  let newArgChildren = 'undefined';\n\n  const joinedChild = children.join();\n  if (joinedChild.includes('$var_')) condChildren = 'var';\n  if (joinedChild.includes('$arg_')) condChildren = 'arg';\n\n  if (condChildren === 'arg') {\n    const key = joinedChild.split('_')[1];\n    console.log('TEXT', { key });\n\n    const foundItem = findFlatItem(args);\n    if (foundItem && key in foundItem) {\n      newArgChildren = foundItem[key];\n      console.log('TEXT', { newArgChildren });\n    }\n  }\n\n  if (newArgChildren === 'undefined') console.log('ARG NOT FOUND');\n\n  return { condChildren, newArgChildren };\n};\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { Image } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, pathSel, getVarValue } from '../project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: {\n    elementsProperties: any;\n    styles: any;\n    URIvariablePath: string[];\n    args: any;\n  };\n};\n\nfunction checkUrl(string: string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nconst defaultUri =\n  'https://www.budgetbatteries.com.au/wp-content/uploads/2021/12/Budget-batteries-placeholder.jpg';\n\n// Element Image\nexport const ImageBox = (props: Tprops) => {\n  // ------- set Props\n  const { elementsProperties, styles, URIvariablePath, args } = props.pass;\n  console.log({ URIvariablePath });\n\n  // ---------- set Url Value as a single string\n  let pathOrUri = URIvariablePath.join();\n\n  const { condChildren, newArgChildren } = testArgs([pathOrUri], args);\n\n  if (condChildren === 'arg') pathOrUri = newArgChildren;\n  if (condChildren === 'var') {\n    const joinedChld = pathOrUri.replace('$var_', '');\n    console.log({ joinedChld });\n    pathOrUri = useData(ct => pathSel(ct, joinedChld));\n  }\n\n  // Se for uma URL válida, usa diretamente, senão busca no useData\n  const watchData = useData(ct => {\n    if (checkUrl(pathOrUri)) return pathOrUri; // Se for uma URL, usa diretamente\n    return pathSel(ct, pathOrUri); // Caso contrário, busca do caminho de dados\n  });\n\n  // ---------- set Styles\n  const stl = getStlValues(styles);\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n  for (let strObj of elementsProperties) {\n    if (!strObj || typeof strObj !== 'string') continue;\n\n    console.log('TEXT', { strObj });\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n      const [hasVar, varValue] = getVarValue(valueProp, 'Component');\n      userElProps[keyProp] = hasVar ? varValue : valueProp;\n    }\n  }\n\n  console.log({ watchData });\n  const isUrl = checkUrl(newArgChildren);\n  console.log({ isUrl });\n\n  const condFinalURI = isUrl ? newArgChildren : watchData || defaultUri;\n\n  console.log({ condFinalURI });\n\n  const allProps = {\n    source: { uri: condFinalURI },\n    style: [stl],\n    resizeMode: 'cover',\n    ...userElProps,\n  };\n\n  return <Image {...allProps} />;\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n  return null;\n};\n\nconst testArgs = (children, args) => {\n  let condChildren = '';\n  let newArgChildren = 'undefined';\n\n  const joinedChild = children.join();\n  if (joinedChild.includes('$var_')) condChildren = 'var';\n  if (joinedChild.includes('$arg_')) condChildren = 'arg';\n\n  if (condChildren === 'arg') {\n    const key = joinedChild.split('_')[1];\n    console.log('TEXT', { key });\n\n    const foundItem = findFlatItem(args);\n    if (foundItem && key in foundItem) {\n      newArgChildren = foundItem[key];\n      console.log('TEXT', { newArgChildren });\n    }\n  }\n\n  if (newArgChildren === 'undefined') console.log('ARG NOT FOUND');\n\n  return { condChildren, newArgChildren };\n};"}}