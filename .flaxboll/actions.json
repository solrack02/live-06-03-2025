{"1741373128967":{"actionType":"saveAll","createdAt":"1741373128967","actionID":"1741373128967","userID":"#TEMP","path":"system.capsules.35fabd5e-4e6b-471c-b6b1-5e08190a3ea7.capsUseCodeInfo.capsUseInputs.ccc_screen-2.capsIptCapsValue","oldValue":["522c98b0-341c-49eb-9794-5b38cdb26b81","bbb6163a-285c-4f9a-9d46-43a5e64ad5cd"],"newValue":["522c98b0-341c-49eb-9794-5b38cdb26b81"]},"1741373128968":{"actionType":"saveAll","createdAt":"1741373128968","actionID":"1741373128968","userID":"#TEMP","path":"system.capsules.65eb5d8f-8e07-4a74-9b38-d27edaf9cedb.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { FlatList } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements, getVarValue, pathSel } from '../project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: {\n    elementProperties: any;\n    pData: any;\n    itemElements: any;\n    styles: any;\n    args: any;\n  };\n};\n\n// FlatList2 - ccc_flatList (newBase)\nexport const FlatList2 = (props: Tprops) => {\n  // ------- set Caps Inputs\n  const { elementProperties, pData, itemElements, styles, args } = props.pass;\n\n  // ---------- set Data Listener\n  console.log({ itemElements });\n  console.log({ elementProperties });\n\n  let watchData = '';\n  if (typeof pData === 'string') watchData = useData(ct => pathSel(ct, pData));\n  // console.log({ watchData });\n  // ---------- set List Item\n  const renderItem = ({ item, index }: any) => (\n    <>{mapElements(itemElements, { item, index })}</>\n  );\n\n  // ------- set User Element Properties (If Exists)\n  let userElProps = {};\n\n  for (const strObj of elementProperties) {\n    console.log('FlatList', { strObj });\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp);\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  // ------- set Styles\n  const stl = getStlValues(styles);\n\n  const allProps = {\n    style: stl,\n    data: watchData,\n    renderItem,\n\n    ...userElProps,\n  };\n\n  // console.log({ elementProperties, allProps });\n\n  console.log({ allProps });\n\n  // ------- set Render\n  return <FlatList {...allProps} />;\n};\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { FlatList } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements, getVarValue, pathSel } from '../project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: {\n    elementProperties: any;\n    pData: any;\n    itemElements: any;\n    styles: any;\n    args: any;\n  };\n};\n\n// FlatList2 - ccc_flatList (newBase)\nexport const FlatList2 = (props: Tprops) => {\n  // ------- set Caps Inputs\n  const { elementProperties, pData, itemElements, styles, args } = props.pass;\n\n  // ---------- set Data Listener\n  console.log({ itemElements });\n  console.log({ elementProperties });\n\n  let watchData = '';\n  if (typeof pData === 'string') watchData = useData(ct => pathSel(ct, pData));\n  // console.log({ watchData });\n  // ---------- set List Item\n  const renderItem = ({ item, index }: any) => (\n    <>{mapElements(itemElements, { item, index })}</>\n  );\n\n  // ------- set User Element Properties (If Exists)\n  let userElProps = {};\n\n  for (const strObj of elementProperties) {\n    console.log('FlatList', { strObj });\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp);\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  // ------- set Styles\n  const stl = getStlValues(styles);\n\n  const allProps = {\n    style: stl,\n    data: watchData,\n    renderItem,\n\n    ...userElProps,\n  };\n\n  // console.log({ elementProperties, allProps });\n\n  console.log({ allProps });\n\n  // ------- set Render\n  return <FlatList {...allProps} />;\n};"}}